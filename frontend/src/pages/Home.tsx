import React, { useState, useEffect, useCallback, Suspense } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Link } from "react-router-dom";
import Portal from "@/components/Portal";
import { apiClient } from "@/lib/api-client";
import type {
  PreviewNovelDto,
  ConvertNovelDto,
  PreviewResponse,
  SendToKindleDto,
  NovelPreview,
} from "@/lib/api-client";
import { useAuth } from "@/lib/contexts";
import {
  X,
  DownloadCloud,
  ChevronUp,
  ChevronDown,
  Clock,
  Loader2,
  CheckCircle,
  XCircle,
  AlertCircle,
  RefreshCw,
  Download,
  History,
  Send,
  Eye,
} from "lucide-react";
import { toast } from "sonner";
import { handleError, validateApiResponse } from "@/lib/error-handler";
import { debug } from "@/lib/debug.js";

// ÂãïÊÖãËºâÂÖ•Â§ßÂûãÂÖÉ‰ª∂
const Layout = React.lazy(() => import("@/components/Layout"));
const SendToKindleButton = React.lazy(
  () => import("@/components/SendToKindleButton")
);
const RecentTasksModal = React.lazy(
  () => import("@/components/RecentTasksModal")
);

// ÂäüËÉΩÁâπÈªûË≥áÊñô
const features = [
  {
    title: "Âø´ÈÄüËΩâÊèõ",
    description: "Âè™ÈúÄËº∏ÂÖ•Á∂≤ÂùÄÔºåÁ≥ªÁµ±Ëá™ÂãïÁà¨Âèñ‰∏¶ËΩâÊèõÁÇ∫ EPUB Ê†ºÂºè",
    icon: "‚ö°",
    gradient: "from-blue-500 to-blue-600",
    color: "text-blue-600",
    bgLight: "bg-blue-50",
    border: "border-blue-200",
  },
  {
    title: "Kindle ÊîØÊè¥",
    description: "ÁôªÂÖ•ÂæåÊîØÊè¥Áõ¥Êé•ËΩâÂØÑËá≥ Kindle ‰ø°ÁÆ±ÔºåÂç≥ÊôÇÂêåÊ≠•Èñ±ËÆÄ",
    icon: "üì±",
    gradient: "from-green-500 to-green-600",
    color: "text-green-600",
    bgLight: "bg-green-50",
    border: "border-green-200",
  },
  {
    title: "‰ªªÂãôËøΩËπ§",
    description: "Âç≥ÊôÇËøΩËπ§ËΩâÊèõÈÄ≤Â∫¶ÔºåÊîØÊè¥‰ªªÂãôÊ≠∑Âè≤Êü•Ë©¢ËàáÁãÄÊÖãÁõ£Êéß",
    icon: "üìä",
    gradient: "from-purple-500 to-purple-600",
    color: "text-purple-600",
    bgLight: "bg-purple-50",
    border: "border-purple-200",
  },
  {
    title: "ÂÆâÂÖ®ÂèØÈù†",
    description: "Á≥ªÁµ±Á©©ÂÆöÔºåË≥áÊñôÂÆâÂÖ®ÔºåÊîØÊè¥Â§öÂπ≥Âè∞ÈÉ®ÁΩ≤ËàáÂÇô‰ªΩÊ©üÂà∂",
    icon: "üîí",
    gradient: "from-orange-500 to-orange-600",
    color: "text-orange-600",
    bgLight: "bg-orange-50",
    border: "border-orange-200",
  },
];

// Á´ôÈªûÂÆöÁæ©
const NOVEL_SITES = {
  NAROU: "narou",
  KAKUYOMU: "kakuyomu",
};

// È†êË¶ΩÂ∞èË™™‰ªãÈù¢ - ÁßªÈô§ÈáçË§áÂÆöÁæ©Ôºå‰ΩøÁî®Âæû api-client Â∞éÂÖ•ÁöÑÈ°ûÂûã

// È†êË¶Ω‰ªªÂãôÁãÄÊÖãÈ°ûÂûã
type PreviewJobStatus = "queued" | "processing" | "completed" | "failed";

// È†êË¶Ω‰ªªÂãôÈüøÊáâ‰ªãÈù¢
interface PreviewJobResponse {
  success: boolean;
  cached?: boolean;
  jobId?: string;
  novelId?: string;
  preview?: NovelPreview;
  status?: PreviewJobStatus;
  message?: string;
}

// ËΩâÊ™î‰ªªÂãôÁãÄÊÖãÈ°ûÂûã - Â¢ûÂä†Êõ¥Â§öÁãÄÊÖã
type ConversionJobStatus =
  | "queued"
  | "processing"
  | "completed"
  | "failed"
  | "retrying"
  | "cancelled";

// ‰ªªÂãôË©≥Á¥∞‰ø°ÊÅØ‰ªãÈù¢
interface JobDetails {
  status: ConversionJobStatus;
  title: string;
  source: string;
  publicUrl?: string;
  progress?: number;
  estimatedTimeRemaining?: number;
  currentStep?: string;
  startTime: Date;
  lastUpdated: Date;
  retryCount: number;
  errorMessage?: string;
}

// Èö®Ê©üÁîüÊàêÊüîÂíåÁöÑÊòé‰∫ÆËâ≤ÂΩ©
const getRandomSoftColor = () => {
  // ÊüîÂíåÊòé‰∫ÆÁöÑÈ°èËâ≤ÁµÑÂêà - Â¢ûÂº∑ÁâàÊú¨ÔºåÊ∑ªÂä†Êõ¥Â§öË¶ñË¶∫Â±§Ê¨°ÂíåÂãïÁï´ÊïàÊûú
  const colors = [
    {
      border: "border-teal-500",
      bg: "bg-teal-500",
      text: "text-teal-600",
      hover: "hover:bg-teal-600",
      light: "bg-teal-50",
      gradient: "from-teal-500 to-teal-600",
      shadow: "shadow-teal-500/20",
      ring: "ring-teal-500/30",
      textLight: "text-teal-500",
      bgLight: "bg-teal-100",
      hoverShadow: "hover:shadow-teal-500/30",
      focusRing: "focus:ring-teal-500/50",
      glowEffect: "shadow-[0_0_20px_rgba(20,184,166,0.15)]",
      gradientHover: "hover:from-teal-400 hover:to-teal-500",
    },
    {
      border: "border-sky-500",
      bg: "bg-sky-500",
      text: "text-sky-600",
      hover: "hover:bg-sky-600",
      light: "bg-sky-50",
      gradient: "from-sky-500 to-sky-600",
      shadow: "shadow-sky-500/20",
      ring: "ring-sky-500/30",
      textLight: "text-sky-500",
      bgLight: "bg-sky-100",
      hoverShadow: "hover:shadow-sky-500/30",
      focusRing: "focus:ring-sky-500/50",
      glowEffect: "shadow-[0_0_20px_rgba(14,165,233,0.15)]",
      gradientHover: "hover:from-sky-400 hover:to-sky-500",
    },
    {
      border: "border-indigo-500",
      bg: "bg-indigo-500",
      text: "text-indigo-600",
      hover: "hover:bg-indigo-600",
      light: "bg-indigo-50",
      gradient: "from-indigo-500 to-indigo-600",
      shadow: "shadow-indigo-500/20",
      ring: "ring-indigo-500/30",
      textLight: "text-indigo-500",
      bgLight: "bg-indigo-100",
      hoverShadow: "hover:shadow-indigo-500/30",
      focusRing: "focus:ring-indigo-500/50",
      glowEffect: "shadow-[0_0_20px_rgba(99,102,241,0.15)]",
      gradientHover: "hover:from-indigo-400 hover:to-indigo-500",
    },
    {
      border: "border-violet-500",
      bg: "bg-violet-500",
      text: "text-violet-600",
      hover: "hover:bg-violet-600",
      light: "bg-violet-50",
      gradient: "from-violet-500 to-violet-600",
      shadow: "shadow-violet-500/20",
      ring: "ring-violet-500/30",
      textLight: "text-violet-500",
      bgLight: "bg-violet-100",
      hoverShadow: "hover:shadow-violet-500/30",
      focusRing: "focus:ring-violet-500/50",
      glowEffect: "shadow-[0_0_20px_rgba(139,92,246,0.15)]",
      gradientHover: "hover:from-violet-400 hover:to-violet-500",
    },
    {
      border: "border-rose-500",
      bg: "bg-rose-500",
      text: "text-rose-600",
      hover: "hover:bg-rose-600",
      light: "bg-rose-50",
      gradient: "from-rose-500 to-rose-600",
      shadow: "shadow-rose-500/20",
      ring: "ring-rose-500/30",
      textLight: "text-rose-500",
      bgLight: "bg-rose-100",
      hoverShadow: "hover:shadow-rose-500/30",
      focusRing: "focus:ring-rose-500/50",
      glowEffect: "shadow-[0_0_20px_rgba(244,63,94,0.15)]",
      gradientHover: "hover:from-rose-400 hover:to-rose-500",
    },
    {
      border: "border-emerald-500",
      bg: "bg-emerald-500",
      text: "text-emerald-600",
      hover: "hover:bg-emerald-600",
      light: "bg-emerald-50",
      gradient: "from-emerald-500 to-emerald-600",
      shadow: "shadow-emerald-500/20",
      ring: "ring-emerald-500/30",
      textLight: "text-emerald-500",
      bgLight: "bg-emerald-100",
      hoverShadow: "hover:shadow-emerald-500/30",
      focusRing: "focus:ring-emerald-500/50",
      glowEffect: "shadow-[0_0_20px_rgba(16,185,129,0.15)]",
      gradientHover: "hover:from-emerald-400 hover:to-emerald-500",
    },
    {
      border: "border-cyan-500",
      bg: "bg-cyan-500",
      text: "text-cyan-600",
      hover: "hover:bg-cyan-600",
      light: "bg-cyan-50",
      gradient: "from-cyan-500 to-cyan-600",
      shadow: "shadow-cyan-500/20",
      ring: "ring-cyan-500/30",
      textLight: "text-cyan-500",
      bgLight: "bg-cyan-100",
      hoverShadow: "hover:shadow-cyan-500/30",
      focusRing: "focus:ring-cyan-500/50",
      glowEffect: "shadow-[0_0_20px_rgba(6,182,212,0.15)]",
      gradientHover: "hover:from-cyan-400 hover:to-cyan-500",
    },
    {
      border: "border-amber-500",
      bg: "bg-amber-500",
      text: "text-amber-600",
      hover: "hover:bg-amber-600",
      light: "bg-amber-50",
      gradient: "from-amber-500 to-amber-600",
      shadow: "shadow-amber-500/20",
      ring: "ring-amber-500/30",
      textLight: "text-amber-500",
      bgLight: "bg-amber-100",
      hoverShadow: "hover:shadow-amber-500/30",
      focusRing: "focus:ring-amber-500/50",
      glowEffect: "shadow-[0_0_20px_rgba(245,158,11,0.15)]",
      gradientHover: "hover:from-amber-400 hover:to-amber-500",
    },
    {
      border: "border-pink-500",
      bg: "bg-pink-500",
      text: "text-pink-600",
      hover: "hover:bg-pink-600",
      light: "bg-pink-50",
      gradient: "from-pink-500 to-pink-600",
      shadow: "shadow-pink-500/20",
      ring: "ring-pink-500/30",
      textLight: "text-pink-500",
      bgLight: "bg-pink-100",
      hoverShadow: "hover:shadow-pink-500/30",
      focusRing: "focus:ring-pink-500/50",
      glowEffect: "shadow-[0_0_20px_rgba(236,72,153,0.15)]",
      gradientHover: "hover:from-pink-400 hover:to-pink-500",
    },
  ];

  return colors[Math.floor(Math.random() * colors.length)];
};

export default function Home() {
  const { isAuthenticated, user } = useAuth();
  const [input, setInput] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [sourceId, setSourceId] = useState("");
  const [source, setSource] = useState("");
  const [error, setError] = useState("");
  const [preview, setPreview] = useState<NovelPreview | null>(null);
  const [showPreview, setShowPreview] = useState(false);
  const [conversionLoading, setConversionLoading] = useState(false);
  const [previewJobId, setPreviewJobId] = useState<string | null>(null);
  const [previewStatus, setPreviewStatus] = useState<PreviewJobStatus | null>(
    null
  );
  // Êõ¥Êñ∞ activeJobs ÁöÑÈ°ûÂûãÂÆöÁæ©
  const [activeJobs, setActiveJobs] = useState<Map<string, JobDetails>>(
    new Map()
  );
  const [previewColor, setPreviewColor] = useState(getRandomSoftColor());
  const [statusBarCollapsed, setStatusBarCollapsed] = useState(false);
  const [isRecentTasksModalOpen, setIsRecentTasksModalOpen] = useState(false);
  // Êñ∞Â¢ûÁãÄÊÖãÁÆ°ÁêÜ
  const [pollingIntervals, setPollingIntervals] = useState<
    Map<string, NodeJS.Timeout>
  >(new Map());
  const [lastSyncTime, setLastSyncTime] = useState<Date>(new Date());

  // üÜï È†êË¶Ω‰ªªÂãôÂ∞àÁî®ÁöÑÊô∫ËÉΩËº™Ë©¢È†ªÁéáË®àÁÆó
  const getPreviewPollingInterval = (
    status: PreviewJobStatus,
    retryCount: number = 0
  ): number => {
    switch (status) {
      case "queued":
        return 1500; // ÊéíÈöä‰∏≠Ôºå1.5ÁßíÊ™¢Êü•‰∏ÄÊ¨°ÔºàÊØîËΩâÊ™îÊõ¥È†ªÁπÅÔºâ
      case "processing":
        return 1000; // ËôïÁêÜ‰∏≠Ôºå1ÁßíÊ™¢Êü•‰∏ÄÊ¨°ÔºàÈ†êË¶ΩËôïÁêÜËºÉÂø´Ôºâ
      case "completed":
      case "failed":
        return 0; // ÁµÇÊ≠¢ÁãÄÊÖãÔºåÂÅúÊ≠¢Ëº™Ë©¢
      default:
        return 1500;
    }
  };

  // üÜï È†êË¶Ω‰ªªÂãôËº™Ë©¢ÁãÄÊÖãÁÆ°ÁêÜ
  const [previewPollingInterval, setPreviewPollingInterval] =
    useState<NodeJS.Timeout | null>(null);
  const [previewRetryCount, setPreviewRetryCount] = useState(0);

  // üÜï Ê∏ÖÁêÜÈ†êË¶ΩËº™Ë©¢ÂÆöÊôÇÂô®
  const clearPreviewPolling = () => {
    if (previewPollingInterval) {
      clearTimeout(previewPollingInterval);
      setPreviewPollingInterval(null);
    }
    setPreviewRetryCount(0);
  };

  // üÜï ÂÑ™ÂåñÁöÑÈ†êË¶Ω‰ªªÂãôËº™Ë©¢ÂáΩÊï∏
  const pollPreviewJob = async (jobId: string, retryCount: number = 0) => {
    try {
      const response = await apiClient.novels.getPreviewStatus(jobId, {
        skipCache: true,
      });
      if (!response.success) {
        const errorMsg = response.message || "Ê™¢Êü•È†êË¶ΩÁãÄÊÖãÂ§±Êïó";
        console.error("‚ùå API ÈüøÊáâÂ§±Êïó:", errorMsg);
        setError(errorMsg);
        toast.error(errorMsg);
        setIsLoading(false);
        clearPreviewPolling();
        return;
      }

      // Áç≤ÂèñÁãÄÊÖã‰∏¶ËΩâÊèõÁÇ∫ÂâçÁ´Ø‰ΩøÁî®ÁöÑÁãÄÊÖãÈ°ûÂûã
      let status: PreviewJobStatus;

      // Â∞áÂæåÁ´ØËøîÂõûÁöÑÁãÄÊÖãÊò†Â∞ÑÂà∞ÂâçÁ´ØÁãÄÊÖã
      const rawStatus = response.data?.status;

      switch (String(rawStatus)) {
        case "completed":
        case "COMPLETED":
          status = "completed";
          break;
        case "failed":
        case "FAILED":
          status = "failed";
          break;
        case "processing":
        case "PROCESSING":
          status = "processing";
          break;
        case "queued":
        case "QUEUED":
          status = "queued";
          break;
        default:
          console.warn(`‚ö†Ô∏è Êú™Áü•ÁöÑ‰ªªÂãôÁãÄÊÖã: ${rawStatus}ÔºåÈªòË™çÁÇ∫ queued`);
          status = "queued";
      }

      setPreviewStatus(status);

      // Ê†πÊìö‰ªªÂãôÁãÄÊÖãËôïÁêÜ
      switch (status) {
        case "completed":
          clearPreviewPolling();
          if (response.data?.preview) {
            // ÊØèÊ¨°È°ØÁ§∫È†êË¶ΩÊôÇÈáçÊñ∞ÁîüÊàêÈö®Ê©üÈ°èËâ≤
            setPreviewColor(getRandomSoftColor());
            setPreview(response.data.preview);
            setShowPreview(true);
            toast.success("Â∞èË™™È†êË¶ΩËºâÂÖ•ÊàêÂäüÔºÅ");
          } else {
            console.error("È†êË¶ΩÊï∏Êìö‰∏çÂÆåÊï¥");
            const errorMsg = "È†êË¶ΩÊï∏Êìö‰∏çÂÆåÊï¥";
            setError(errorMsg);
            toast.error(errorMsg);
          }
          setIsLoading(false);
          break;

        case "failed":
          clearPreviewPolling();
          const failureMsg = response.message || "Áç≤ÂèñÈ†êË¶ΩÂ§±Êïó";
          setError(failureMsg);
          toast.error(failureMsg);
          setIsLoading(false);
          break;

        case "processing":
        case "queued":
          // üÜï ‰ΩøÁî®Êô∫ËÉΩËº™Ë©¢ÈñìÈöî
          const interval = getPreviewPollingInterval(status, retryCount);

          const timeoutId = setTimeout(() => {
            pollPreviewJob(jobId, retryCount);
          }, interval);
          setPreviewPollingInterval(timeoutId);
          break;

        default:
          clearPreviewPolling();
          const unknownMsg = "Êú™Áü•ÁöÑÈ†êË¶Ω‰ªªÂãôÁãÄÊÖã";
          setError(unknownMsg);
          toast.error(unknownMsg);
          setIsLoading(false);
      }

      // ÈáçÁΩÆÈáçË©¶Ë®àÊï∏Âô®ÔºàÊàêÂäüË´ãÊ±ÇÂæåÔºâ
      setPreviewRetryCount(0);
    } catch (error: any) {
      console.error("Ëº™Ë©¢È†êË¶Ω‰ªªÂãôÂ§±Êïó:", error);

      const standardError = handleError(error, {
        context: "Ê™¢Êü•È†êË¶ΩÁãÄÊÖã",
        showToast: false, // ÈÅøÂÖçÈÅéÂ§öÈÄöÁü•
      });

      // Ê†πÊìöÈåØË™§È°ûÂûãÊ±∫ÂÆöÊòØÂê¶ÈáçË©¶
      const shouldRetry = standardError.shouldRetry && retryCount < 6;
      const retryDelay = standardError.retryDelay || 3000;

      if (shouldRetry) {
        const newRetryCount = retryCount + 1;
        setPreviewRetryCount(newRetryCount);

        const timeoutId = setTimeout(() => {
          pollPreviewJob(jobId, newRetryCount);
        }, retryDelay);
        setPreviewPollingInterval(timeoutId);

        // Âè™Âú®ÂâçÂπæÊ¨°ÈáçË©¶ÊôÇÈ°ØÁ§∫ÈåØË™§ÊèêÁ§∫ÔºåÈÅøÂÖçÈÅéÂ§öÈÄöÁü•
        if (newRetryCount <= 2) {
          toast.warning(`${standardError.userMessage}ÔºåÊ≠£Âú®ÈáçË©¶...`);
        }
      } else {
        clearPreviewPolling();
        setError(standardError.userMessage);
        toast.error(standardError.userMessage);
        setIsLoading(false);
      }
    }
  };

  // ÁµÑ‰ª∂ÊéõËºâÊôÇË®≠ÁΩÆ‰∏ÄÂÄãÈö®Ê©üÈ°èËâ≤
  useEffect(() => {
    setPreviewColor(getRandomSoftColor());
  }, []);

  // ÁôªÂÖ•ËôïÁêÜÂáΩÊï∏
  const handleLogin = () => {
    // Áç≤ÂèñÂæåÁ´Ø API URL
    const apiUrl = import.meta.env.VITE_API_BASE_URL || "http://localhost:3000";

    // ÈáçÂÆöÂêëÂà∞ Google OAuth ÁôªÂÖ•È†ÅÈù¢
    window.location.href = `${apiUrl}/api/v1/auth/google`;
  };

  // üÜï ÁµÑ‰ª∂Ê∏ÖÁêÜÊôÇÊ∏ÖÁêÜÊâÄÊúâËº™Ë©¢
  useEffect(() => {
    return () => {
      clearPreviewPolling();
      // Ê∏ÖÁêÜËΩâÊ™î‰ªªÂãôËº™Ë©¢
      pollingIntervals.forEach((interval) => {
        clearTimeout(interval);
      });
    };
  }, []);

  // È©óË≠âËº∏ÂÖ•ÁöÑÁ∂≤ÂùÄÊàñ ID
  useEffect(() => {
    if (!input.trim()) {
      setError("");
      setSource("");
      setSourceId("");
      return;
    }

    // Ëß£ÊûêËº∏ÂÖ•ÂÖßÂÆπ
    let detectedSource = "";
    let detectedSourceId = "";

    // Ê™¢Êü•ÊòØÂê¶ÁÇ∫ kakuyomu Á∂≤ÂùÄ
    const kakuyomuUrlPattern = /^https:\/\/kakuyomu\.jp\/works\/(\d+)/;
    const kakuyomuMatch = input.match(kakuyomuUrlPattern);

    // Ê™¢Êü•ÊòØÂê¶ÁÇ∫ narou Á∂≤ÂùÄ
    const narouUrlPattern = /^https:\/\/ncode\.syosetu\.com\/(n\w+)/;
    const narouMatch = input.match(narouUrlPattern);

    // Áõ¥Êé•Ê™¢Êü•ÊòØÂê¶ÁÇ∫ kakuyomu ÁöÑ ID (Á¥îÊï∏Â≠ó)
    const kakuyomuIdPattern = /^\d+$/;

    // Ê™¢Êü•ÊòØÂê¶ÁÇ∫ narou ÁöÑ ID (n ÈñãÈ†≠)
    const narouIdPattern = /^n\w+$/;

    const rules = [
      {
        cond: kakuyomuMatch,
        site: NOVEL_SITES.KAKUYOMU,
        id: kakuyomuMatch?.[1],
      },
      { cond: narouMatch, site: NOVEL_SITES.NAROU, id: narouMatch?.[1] },
      {
        cond: kakuyomuIdPattern.test(input),
        site: NOVEL_SITES.KAKUYOMU,
        id: input,
      },
      { cond: narouIdPattern.test(input), site: NOVEL_SITES.NAROU, id: input },
    ];

    const match = rules.find((rule) => Boolean(rule.cond));
    if (!match || !match.id) {
      setError("Ë´ãËº∏ÂÖ•Ê≠£Á¢∫ÁöÑÁ∂≤ÂùÄÊàñ‰ΩúÂìÅ ID");
      setSource("");
      setSourceId("");
      return;
    }

    detectedSource = match.site;
    detectedSourceId = match.id;

    // Ë®≠ÁΩÆÈ©óË≠âÂæåÁöÑË≥áË®ä
    setSource(detectedSource);
    setSourceId(detectedSourceId);
    setError("");
  }, [input]);

  // ËôïÁêÜ‰∏ãËºâË´ãÊ±Ç
  const handleDownload = async () => {
    if (!source || !sourceId) {
      const errorMsg = "Ë´ãËº∏ÂÖ•Ê≠£Á¢∫ÁöÑÁ∂≤ÂùÄÊàñ‰ΩúÂìÅ ID";
      debug.warn("PREVIEW_REQUEST", "È†êË¶ΩË´ãÊ±ÇÂèÉÊï∏ÁÑ°Êïà", {
        source,
        sourceId,
        errorMessage: errorMsg,
      });
      setError(errorMsg);
      return;
    }

    setIsLoading(true);
    setError("");

    debug.info("PREVIEW_REQUEST", "ÈñãÂßãË´ãÊ±ÇÂ∞èË™™È†êË¶Ω", {
      source,
      sourceId,
      timestamp: new Date().toISOString(),
    });

    try {
      // Á¢∫‰øùË´ãÊ±ÇÊï∏ÊìöÊ†ºÂºèÊ≠£Á¢∫
      const requestData: PreviewNovelDto = {
        source,
        sourceId,
      };

      debug.debug("PREVIEW_REQUEST", "ÁôºÈÄÅÈ†êË¶ΩË´ãÊ±Ç", {
        requestData,
        endpoint: "/api/v1/novels/preview",
      });

      // Êèê‰∫§È†êË¶ΩË´ãÊ±Ç
      const response = await apiClient.novels.preview(requestData);

      debug.debug("PREVIEW_RESPONSE", "Êî∂Âà∞È†êË¶ΩÈüøÊáâ", {
        response,
        responseStructure: Object.keys(response || {}),
        hasCachedData: !!(response?.data?.cached || (response as any)?.cached),
        hasPreviewData: !!(
          response?.data?.preview || (response as any)?.preview
        ),
        hasJobId: !!(response?.data?.jobId || (response as any)?.jobId),
      });

      // ‰ΩøÁî®Áµ±‰∏ÄÈüøÊáâÈ©óË≠â
      const validation = validateApiResponse<PreviewResponse>(
        response,
        "Áç≤ÂèñÂ∞èË™™È†êË¶Ω"
      );
      if (!validation.isValid) {
        debug.warn("PREVIEW_VALIDATION", "È†êË¶ΩÈüøÊáâÈ©óË≠âÂ§±Êïó", {
          validationError: validation.error,
          response,
        });
        if (validation.error) {
          setError(validation.error.userMessage);
        }
        setIsLoading(false);
        return;
      }

      const responseData = validation.data!;

      // üÜï Áµ±‰∏ÄËôïÁêÜÔºöÂÑ™ÂÖàËôïÁêÜÁ∑©Â≠òÁµêÊûú
      if (responseData.cached && responseData.preview) {
        // Á∑©Â≠òÂëΩ‰∏≠ÔºåÁ´ãÂç≥È°ØÁ§∫
        debug.info("PREVIEW_CACHE_HIT", "Á∑©Â≠òÂëΩ‰∏≠ÔºåÁ´ãÂç≥È°ØÁ§∫È†êË¶Ω", {
          novelId: responseData.preview.novelId,
          title: responseData.preview.title,
          author: responseData.preview.author,
          source: responseData.preview.source,
        });

        setPreviewColor(getRandomSoftColor());
        setPreview(responseData.preview);
        setShowPreview(true);
        setIsLoading(false);
        toast.success("Â∞èË™™È†êË¶ΩËºâÂÖ•ÊàêÂäüÔºÅÔºà‰æÜËá™Á∑©Â≠òÔºâ");
        return;
      }

      // üÜï ÈùûÁ∑©Â≠òÁµêÊûúÔºåÈñãÂßãËº™Ë©¢
      if (responseData.jobId) {
        debug.info("PREVIEW_JOB_CREATED", "ÂâµÂª∫È†êË¶Ω‰ªªÂãôÔºåÈñãÂßãËº™Ë©¢", {
          jobId: responseData.jobId,
          source,
          sourceId,
        });

        setPreviewJobId(responseData.jobId);
        setPreviewStatus("queued");
        toast.info("Ê≠£Âú®ËôïÁêÜÈ†êË¶ΩË´ãÊ±ÇÔºåË´ãÁ®çÂÄô...");
        // üÜï ‰ΩøÁî®Êñ∞ÁöÑËº™Ë©¢Ê©üÂà∂
        pollPreviewJob(responseData.jobId, 0);
      } else {
        // ËôïÁêÜËàäÊ†ºÂºèÂõûÊáâÔºàÂêëÂæåÁõ∏ÂÆπÔºâ
        const errorMsg = "Áç≤ÂèñÈ†êË¶Ω‰ªªÂãô ID Â§±Êïó";
        debug.error("PREVIEW_REQUEST", "ÈüøÊáâ‰∏≠Áº∫Â∞ë jobId", {
          responseData,
          errorMessage: errorMsg,
        });
        setError(errorMsg);
        toast.error(errorMsg);
        setIsLoading(false);
      }
    } catch (error: any) {
      debug.error("PREVIEW_REQUEST", "Áç≤ÂèñÈ†êË¶ΩÂ§±Êïó", {
        error,
        errorType: error?.constructor?.name,
        errorCode: error?.code,
        errorStatus: error?.response?.status,
        source,
        sourceId,
      });
      handlePreviewError(error);
    }
  };

  // üÜï Á∞°ÂåñÁöÑÈåØË™§ËôïÁêÜÂáΩÊï∏ - ‰ΩøÁî®Áµ±‰∏ÄÈåØË™§ËôïÁêÜÂ∑•ÂÖ∑
  const handlePreviewError = (error: any) => {
    debug.error("PREVIEW_ERROR", "È†êË¶ΩË´ãÊ±ÇÈåØË™§ËôïÁêÜ", {
      error,
      context: "Áç≤ÂèñÂ∞èË™™È†êË¶Ω",
    });

    const standardError = handleError(error, {
      context: "Áç≤ÂèñÂ∞èË™™È†êË¶Ω",
      showToast: true,
    });

    setError(standardError.userMessage);
    setIsLoading(false);
  };

  // Êô∫ËÉΩËº™Ë©¢È†ªÁéáË®àÁÆó
  const getPollingInterval = (
    status: ConversionJobStatus,
    retryCount: number
  ): number => {
    switch (status) {
      case "queued":
        return 5000; // ÊéíÈöä‰∏≠Ôºå5ÁßíÊ™¢Êü•‰∏ÄÊ¨°
      case "processing":
        return 3000; // ËôïÁêÜ‰∏≠Ôºå3ÁßíÊ™¢Êü•‰∏ÄÊ¨°
      case "retrying":
        return Math.min(8000 + retryCount * 2000, 20000); // ÈáçË©¶‰∏≠ÔºåÈÄêÊº∏Â¢ûÂä†ÈñìÈöî
      case "completed":
      case "failed":
      case "cancelled":
        return 0; // ÁµÇÊ≠¢ÁãÄÊÖãÔºåÂÅúÊ≠¢Ëº™Ë©¢
      default:
        return 5000;
    }
  };

  // Ê∏ÖÁêÜËº™Ë©¢ÂÆöÊôÇÂô®
  const clearPollingInterval = (jobId: string) => {
    const interval = pollingIntervals.get(jobId);
    if (interval) {
      clearTimeout(interval);
      setPollingIntervals((prev) => {
        const newMap = new Map(prev);
        newMap.delete(jobId);
        return newMap;
      });
    }
  };

  // Â¢ûÂº∑ÁöÑËº™Ë©¢‰ªªÂãôÁãÄÊÖã
  const pollJobStatus = async (
    jobId: string,
    title: string,
    source: string
  ) => {
    try {
      debug.info("JOB_POLLING", `ÈñãÂßãÊ™¢Êü•ËΩâÊ™î‰ªªÂãôÁãÄÊÖã: ${jobId}`, {
        jobId,
        title,
        source,
      });

      const response = await apiClient.conversions.getStatus(jobId, {
        skipCache: true,
      });

      // Ë®òÈåÑÂÆåÊï¥ÈüøÊáâÊï∏ÊìöÂíåÊ†ºÂºèÈ©óË≠â
      debug.debug("JOB_POLLING", `ËΩâÊ™î‰ªªÂãô ${jobId} API ÈüøÊáâ`, {
        jobId,
        response,
        responseStructure: Object.keys(response || {}),
      });

      // È©óË≠âÈüøÊáâÊ†ºÂºè
      const {
        isValid,
        data: validatedData,
        error: validationError,
      } = validateApiResponse(response, "ËΩâÊ™îÁãÄÊÖãÊü•Ë©¢");

      if (!isValid || !response.success) {
        const errorMsg =
          validationError?.userMessage ||
          response.message ||
          "Ê™¢Êü•‰ªªÂãôÁãÄÊÖãÂ§±Êïó";

        debug.warn("JOB_POLLING", `‰ªªÂãôÁãÄÊÖãÊü•Ë©¢Â§±Êïó: ${jobId}`, {
          jobId,
          error: errorMsg,
          validationError,
          response,
        });

        updateJobStatus(jobId, "failed", errorMsg);
        toast.error(`‰ªªÂãôÂ§±ÊïóÔºö${title} - ${errorMsg}`);
        clearPollingInterval(jobId);
        return;
      }

      // Ê≠£Á¢∫Ëß£ÊûêÁãÄÊÖãÔºöÂæû ApiResponse ÂåÖË£ù‰∏≠ÊèêÂèñÊï∏Êìö
      // response ÁöÑÁµêÊßãÊòØ ApiResponse<ConversionStatusResponse>
      // Â¶ÇÊûúÊúâ data Â≠óÊÆµÔºå‰ΩøÁî® response.dataÔºåÂê¶Ââá‰ΩøÁî® response Êú¨Ë∫´ÔºàÂêëÂæåÂÖºÂÆπÔºâ
      let statusSource: any;

      if ("data" in response && response.data) {
        // Êñ∞ÁöÑÁµ±‰∏ÄÊ†ºÂºèÔºö{ success: true, data: ConversionStatusResponse }
        statusSource = response.data;
        debug.verbose("JOB_POLLING", `‰ΩøÁî®Áµ±‰∏ÄÊ†ºÂºèÈüøÊáâ: ${jobId}`, {
          statusSource,
        });
      } else {
        // Áõ¥Êé•ËøîÂõûÁöÑÊ†ºÂºèÔºöConversionStatusResponseÔºàÂåÖÂê´ success Â≠óÊÆµÔºâ
        statusSource = response;
        debug.verbose("JOB_POLLING", `‰ΩøÁî®Áõ¥Êé•Ê†ºÂºèÈüøÊáâ: ${jobId}`, {
          statusSource,
        });
      }

      // Â∞áÂæåÁ´ØËøîÂõûÁöÑÁãÄÊÖãÊò†Â∞ÑÂà∞ÂâçÁ´ØÁãÄÊÖã
      let status: ConversionJobStatus;

      const rawStatus = statusSource?.status;

      debug.debug("JOB_POLLING", `ËΩâÊ™î‰ªªÂãôÁãÄÊÖãËß£Êûê: ${jobId}`, {
        jobId,
        rawStatus,
        statusSource: {
          ...statusSource,
          // ‰∏çË®òÈåÑÂèØËÉΩÁöÑÊïèÊÑü‰ø°ÊÅØ
          publicUrl: statusSource?.publicUrl ? "[URL]" : undefined,
        },
      });

      switch (String(rawStatus)) {
        case "completed":
        case "COMPLETED":
          status = "completed";
          break;
        case "failed":
        case "FAILED":
          status = "failed";
          break;
        case "processing":
        case "PROCESSING":
          status = "processing";
          break;
        case "queued":
        case "QUEUED":
          status = "queued";
          break;
        case "retrying":
        case "RETRYING":
          status = "retrying";
          break;
        case "cancelled":
        case "CANCELLED":
          status = "cancelled";
          break;
        default:
          debug.warn("JOB_POLLING", `Êú™Áü•ÁöÑËΩâÊ™î‰ªªÂãôÁãÄÊÖã: ${jobId}`, {
            jobId,
            rawStatus,
            fallbackStatus: "failed",
          });
          status = "failed";
      }

      debug.info("JOB_POLLING", `ËΩâÊ™î‰ªªÂãôÁãÄÊÖãËΩâÊèõ: ${jobId}`, {
        jobId,
        rawStatus,
        finalStatus: status,
        hasPublicUrl: !!statusSource?.publicUrl,
        progress: statusSource?.progress,
        currentStep: statusSource?.currentStep,
      });

      const publicUrl = statusSource?.publicUrl;
      const progress = statusSource?.progress;
      const estimatedTimeRemaining = statusSource?.estimatedTimeRemaining;
      const currentStep = statusSource?.currentStep;

      // Êõ¥Êñ∞‰ªªÂãôÁãÄÊÖã
      updateJobStatus(
        jobId,
        status,
        undefined,
        publicUrl,
        progress,
        estimatedTimeRemaining,
        currentStep
      );

      // Ê†πÊìö‰ªªÂãôÁãÄÊÖãËôïÁêÜ
      switch (status) {
        case "completed":
          // ‰ªªÂãôÂÆåÊàêÔºåÂÅúÊ≠¢Ëº™Ë©¢
          clearPollingInterval(jobId);
          debug.info("JOB_COMPLETED", `ËΩâÊ™î‰ªªÂãôÂÆåÊàê: ${jobId}`, {
            jobId,
            title,
            hasDownloadUrl: !!publicUrl,
          });
          toast.success(`ËΩâÊ™îÂÆåÊàêÔºö${title}`, {
            action: {
              label: "‰∏ãËºâ",
              onClick: () => {
                if (publicUrl) {
                  debug.info("JOB_DOWNLOAD", `ÈñãÂßã‰∏ãËºâ: ${jobId}`, {
                    jobId,
                    title,
                  });
                  // ‰øÆÂæ©ÔºöÁõ¥Êé•‰∏ãËºâËÄå‰∏çÊòØÈñãÂïüÊñ∞ÂàÜÈ†Å
                  const link = document.createElement("a");
                  link.href = publicUrl;
                  link.download = `${title || "novel"}.epub`;
                  link.rel = "noopener noreferrer";
                  document.body.appendChild(link);
                  link.click();
                  document.body.removeChild(link);
                }
              },
            },
          });
          break;

        case "failed":
        case "cancelled":
          // ‰ªªÂãôÂ§±ÊïóÊàñÂèñÊ∂àÔºåÂÅúÊ≠¢Ëº™Ë©¢
          clearPollingInterval(jobId);
          const failureMsg =
            statusSource?.message ||
            (status === "cancelled" ? "‰ªªÂãôÂ∑≤ÂèñÊ∂à" : "ËΩâÊ™îÈÅéÁ®ãÁôºÁîüÈåØË™§");

          debug.warn("JOB_FAILED", `ËΩâÊ™î‰ªªÂãôÂ§±ÊïóÊàñÂèñÊ∂à: ${jobId}`, {
            jobId,
            title,
            status,
            errorMessage: failureMsg,
          });

          updateJobStatus(jobId, status, failureMsg);
          toast.error(
            `${
              status === "cancelled" ? "‰ªªÂãôÂèñÊ∂à" : "ËΩâÊ™îÂ§±Êïó"
            }Ôºö${title} - ${failureMsg}`
          );
          break;

        case "queued":
        case "processing":
        case "retrying":
          // ÁπºÁ∫åËº™Ë©¢Ôºå‰ΩøÁî®Êô∫ËÉΩÈñìÈöî
          const currentJob = activeJobs.get(jobId);
          const retryCount = currentJob?.retryCount || 0;
          const interval = getPollingInterval(status, retryCount);

          debug.verbose("JOB_POLLING", `ÁπºÁ∫åËº™Ë©¢‰ªªÂãô: ${jobId}`, {
            jobId,
            status,
            retryCount,
            nextPollInterval: interval,
            currentStep,
            progress,
          });

          if (interval > 0) {
            const timeoutId = setTimeout(
              () => pollJobStatus(jobId, title, source),
              interval
            );
            setPollingIntervals((prev) => {
              const newMap = new Map(prev);
              newMap.set(jobId, timeoutId);
              return newMap;
            });
          }
          break;

        default:
          clearPollingInterval(jobId);
          debug.error("JOB_POLLING", `‰ªªÂãôÁãÄÊÖãÁï∞Â∏∏: ${jobId}`, {
            jobId,
            status,
            title,
          });
          updateJobStatus(jobId, "failed", "Êú™Áü•ÁöÑ‰ªªÂãôÁãÄÊÖã");
          toast.error(`‰ªªÂãôÁãÄÊÖãÁï∞Â∏∏Ôºö${title}`);
      }

      // Êõ¥Êñ∞ÊúÄÂæåÂêåÊ≠•ÊôÇÈñì
      setLastSyncTime(new Date());
    } catch (error: any) {
      debug.error("JOB_POLLING", `Ëº™Ë©¢‰ªªÂãôÁãÄÊÖãÂ§±Êïó: ${jobId}`, {
        jobId,
        title,
        error,
        errorType: error?.constructor?.name,
        errorCode: error?.code,
        errorStatus: error?.response?.status,
      });

      const standardError = handleError(error, {
        context: "Ê™¢Êü•ËΩâÊ™îÁãÄÊÖã",
        showToast: false, // ÈÅøÂÖçÈÅéÂ§öÈÄöÁü•
      });

      const currentJob = activeJobs.get(jobId);
      const retryCount = (currentJob?.retryCount || 0) + 1;

      // Ê†πÊìöÈåØË™§È°ûÂûãÂíåÈáçË©¶Ê¨°Êï∏Ê±∫ÂÆöÊòØÂê¶ÈáçË©¶
      const shouldRetry = standardError.shouldRetry && retryCount < 5;
      const retryDelay = standardError.retryDelay || 8000;

      debug.info("JOB_POLLING", `Ê±∫ÂÆöÈáçË©¶Á≠ñÁï•: ${jobId}`, {
        jobId,
        retryCount,
        maxRetries: 5,
        shouldRetry,
        retryDelay,
        errorType: standardError.type,
      });

      if (shouldRetry) {
        // Êõ¥Êñ∞ÁÇ∫ÈáçË©¶ÁãÄÊÖã
        updateJobStatus(
          jobId,
          "retrying",
          `${standardError.userMessage}ÔºåÊ≠£Âú®ÈáçË©¶... (${retryCount}/5)`,
          undefined,
          undefined,
          undefined,
          undefined,
          retryCount
        );

        const timeoutId = setTimeout(
          () => pollJobStatus(jobId, title, source),
          retryDelay
        );
        setPollingIntervals((prev) => {
          const newMap = new Map(prev);
          newMap.set(jobId, timeoutId);
          return newMap;
        });
      } else {
        clearPollingInterval(jobId);
        updateJobStatus(jobId, "failed", standardError.userMessage);
        toast.error(`${title} - ${standardError.userMessage}`);
      }
    }
  };

  // Â¢ûÂº∑ÁöÑÊõ¥Êñ∞‰ªªÂãôÁãÄÊÖãÂáΩÊï∏
  const updateJobStatus = (
    jobId: string,
    status: ConversionJobStatus,
    errorMessage?: string,
    publicUrl?: string,
    progress?: number,
    estimatedTimeRemaining?: number,
    currentStep?: string,
    retryCount?: number
  ) => {
    setActiveJobs((prev) => {
      const newMap = new Map(prev);
      const existingJob = newMap.get(jobId);

      if (existingJob) {
        newMap.set(jobId, {
          ...existingJob,
          status,
          publicUrl: publicUrl || existingJob.publicUrl,
          progress: progress !== undefined ? progress : existingJob.progress,
          estimatedTimeRemaining:
            estimatedTimeRemaining !== undefined
              ? estimatedTimeRemaining
              : existingJob.estimatedTimeRemaining,
          currentStep: currentStep || existingJob.currentStep,
          lastUpdated: new Date(),
          retryCount:
            retryCount !== undefined ? retryCount : existingJob.retryCount,
          errorMessage: errorMessage || existingJob.errorMessage,
        });
      }
      return newMap;
    });
  };

  // ÁßªÈô§‰ªªÂãô
  const removeJob = (jobId: string) => {
    setActiveJobs((prev) => {
      const newMap = new Map(prev);
      newMap.delete(jobId);
      return newMap;
    });
  };

  // Áç≤Âèñ‰ªªÂãôÁãÄÊÖãÈ°ØÁ§∫ÊñáÊú¨
  const getStatusText = (job: JobDetails) => {
    const {
      status,
      progress,
      currentStep,
      estimatedTimeRemaining,
      retryCount,
    } = job;

    switch (status) {
      case "queued":
        return "ÊéíÈöä‰∏≠...";
      case "processing":
        if (currentStep) {
          return `${currentStep}${
            progress !== undefined ? ` (${progress}%)` : ""
          }`;
        }
        return `ËΩâÊ™îËôïÁêÜ‰∏≠...${
          progress !== undefined ? ` (${progress}%)` : ""
        }`;
      case "completed":
        return "ËΩâÊ™îÂÆåÊàêÔºÅ";
      case "failed":
        return "ËΩâÊ™îÂ§±Êïó";
      case "retrying":
        return `ÈáçË©¶‰∏≠... (${retryCount}/5)`;
      case "cancelled":
        return "Â∑≤ÂèñÊ∂à";
      default:
        return "Êú™Áü•ÁãÄÊÖã";
    }
  };

  // Áç≤ÂèñÁãÄÊÖãÂúñÁ§∫
  const getStatusIcon = (status: ConversionJobStatus) => {
    switch (status) {
      case "queued":
        return <Clock size={14} className="text-blue-500" />;
      case "processing":
        return <Loader2 size={14} className="text-blue-500 animate-spin" />;
      case "completed":
        return <CheckCircle size={14} className="text-green-500" />;
      case "failed":
        return <XCircle size={14} className="text-red-500" />;
      case "retrying":
        return <RefreshCw size={14} className="text-orange-500 animate-spin" />;
      case "cancelled":
        return <AlertCircle size={14} className="text-gray-500" />;
      default:
        return <AlertCircle size={14} className="text-gray-500" />;
    }
  };

  // Ê†ºÂºèÂåñÊôÇÈñìÈ°ØÁ§∫
  const formatTimeRemaining = (seconds?: number): string => {
    if (!seconds || seconds <= 0) return "ÂâõÂâõ";

    if (seconds < 60) {
      return `Á¥Ñ ${Math.ceil(seconds)} Áßí`;
    } else if (seconds < 3600) {
      return `Á¥Ñ ${Math.ceil(seconds / 60)} ÂàÜÈêò`;
    } else {
      return `Á¥Ñ ${Math.ceil(seconds / 3600)} Â∞èÊôÇ`;
    }
  };

  // ÈÄ≤Â∫¶Ê¢ùÁµÑ‰ª∂
  const ProgressBar = ({ progress }: { progress?: number }) => {
    if (progress === undefined) return null;

    return (
      <div className="w-full bg-gray-200 rounded-full h-1.5 mt-1">
        <div
          className="bg-blue-500 h-1.5 rounded-full transition-all duration-300 ease-out"
          style={{ width: `${Math.max(0, Math.min(100, progress))}%` }}
        />
      </div>
    );
  };

  // ‰øÆÊîπ handleConfirmConversion ÂáΩÊï∏‰ª•ÂåÖÂê´Êñ∞ÁöÑ‰ªªÂãôË©≥Á¥∞‰ø°ÊÅØ
  const handleConfirmConversion = async () => {
    if (!preview) return;

    setConversionLoading(true);

    try {
      const requestData: ConvertNovelDto = {
        novelId: preview.novelId,
        includeCover: true,
      };

      const response = await apiClient.conversions.create(requestData);

      if (!response.success || !response.data?.jobId) {
        throw new Error(response.message || "ËΩâÊ™îË´ãÊ±ÇÂ§±Êïó");
      }

      const jobId = response.data.jobId;

      // ÂâµÂª∫Êñ∞ÁöÑ‰ªªÂãôË©≥Á¥∞‰ø°ÊÅØ
      const newJob: JobDetails = {
        status: "queued",
        title: preview.title,
        source: preview.source,
        startTime: new Date(),
        lastUpdated: new Date(),
        retryCount: 0,
      };

      // Ê∑ªÂä†Âà∞Ê¥ªÂãï‰ªªÂãôÂàóË°®
      setActiveJobs((prev) => {
        const newMap = new Map(prev);
        newMap.set(jobId, newJob);
        return newMap;
      });

      // ÈñãÂßãËº™Ë©¢‰ªªÂãôÁãÄÊÖã
      setTimeout(
        () => pollJobStatus(jobId, preview.title, preview.source),
        2000
      );

      toast.success("ËΩâÊ™î‰ªªÂãôÂ∑≤ÈñãÂßã", {
        description: `Ê≠£Âú®ËôïÁêÜÔºö${preview.title}`,
      });

      // ÈóúÈñâÈ†êË¶Ω
      handleClosePreview();
    } catch (error: any) {
      console.error("ËΩâÊ™îË´ãÊ±ÇÂ§±Êïó:", error);

      let errorMessage = "ËΩâÊ™îË´ãÊ±ÇÂ§±Êïó";

      if (error.code === "ECONNABORTED" || error.message.includes("timeout")) {
        errorMessage = "ËΩâÊ™îË´ãÊ±ÇË∂ÖÊôÇÔºåË´ãÁ®çÂæåÂÜçË©¶";
      } else if (
        error.message.includes("Network Error") ||
        error.code === "ERR_NETWORK"
      ) {
        errorMessage = "Á∂≤Ë∑ØÈÄ£Á∑öÂ§±ÊïóÔºåË´ãÊ™¢Êü•Á∂≤Ë∑ØÈÄ£Á∑ö";
      } else if (error.response?.status === 400) {
        errorMessage = error.response.data?.message || "Ë´ãÊ±ÇÂèÉÊï∏ÈåØË™§";
      } else if (error.response?.status === 401) {
        errorMessage = "Ë´ãÂÖàÁôªÂÖ•ÂæåÂÜçÈÄ≤Ë°åËΩâÊ™î";
      } else if (error.response?.status === 429) {
        errorMessage = "Ë´ãÊ±ÇÈÅéÊñºÈ†ªÁπÅÔºåË´ãÁ®çÂæåÂÜçË©¶";
      } else if (error.response?.status >= 500) {
        errorMessage = "‰º∫ÊúçÂô®Êö´ÊôÇÁÑ°Ê≥ïËôïÁêÜË´ãÊ±ÇÔºåË´ãÁ®çÂæåÂÜçË©¶";
      } else if (error.message) {
        errorMessage = error.message;
      }

      setError(errorMessage);
      toast.error(errorMessage);
    } finally {
      setConversionLoading(false);
    }
  };

  // ÈóúÈñâÈ†êË¶Ω
  const handleClosePreview = () => {
    setShowPreview(false);
    setPreview(null);
    setError("");
    // üÜï ÈóúÈñâÈ†êË¶ΩÊôÇÊ∏ÖÁêÜËº™Ë©¢
    clearPreviewPolling();
  };

  // ÂàáÊèõÁãÄÊÖãÊ¨ÑÊî∂Âêà/Â±ïÈñã
  const toggleStatusBar = () => {
    setStatusBarCollapsed(!statusBarCollapsed);
  };

  // ËôïÁêÜSend to Kindle (‰æõRecentTasksModal‰ΩøÁî®) - Áõ¥Êé•ÁôºÈÄÅÔºå‰∏çÈ°ØÁ§∫Á¢∫Ë™çÂ∞çË©±Ê°Ü
  const handleSendToKindleFromModal = async (jobId: string) => {
    if (!isAuthenticated) {
      toast.error("Ë´ãÂÖàÁôªÂÖ•‰ª•‰ΩøÁî®Send to KindleÂäüËÉΩ", {
        description: "ÈúÄË¶ÅÁôªÂÖ•",
      });
      return;
    }

    if (!user?.kindleEmail) {
      toast.error("Ë´ãÂÖàË®≠ÂÆö Kindle ÈõªÂ≠êÈÉµ‰ª∂", {
        description: "Ë´ãÂà∞ÊúÉÂì°‰∏≠ÂøÉË®≠ÂÆöÊÇ®ÁöÑ Kindle ÈÉµÁÆ±",
      });
      return;
    }

    try {
      toast.info("Ê≠£Âú®ÁôºÈÄÅÂà∞ Kindle...", {
        description: "Ë´ãÁ®çÂÄô",
      });

      const requestData: SendToKindleDto = {
        jobId: jobId,
        kindleEmail: user.kindleEmail,
      };

      const response = await apiClient.kindle.send(requestData);

      if (response.success) {
        toast.success("EPUB Â∑≤Âä†ÂÖ• Kindle ÁôºÈÄÅÈöäÂàó", {
          description: "Ë´ãÁ®çÂæåÊü•ÁúãÊÇ®ÁöÑ Kindle Ë®≠ÂÇô",
        });
      } else {
        throw new Error(response.message || "ÁôºÈÄÅÂ§±Êïó");
      }
    } catch (error: any) {
      console.error("ÁôºÈÄÅÂà∞ Kindle Â§±Êïó:", error);
      const errorMessage = error.message || "ÁôºÈÄÅÂà∞ Kindle ÊôÇÁôºÁîüÈåØË™§";
      toast.error(errorMessage, {
        description: "ÁôºÈÄÅÂ§±Êïó",
      });
    }
  };

  return (
    <Suspense
      fallback={
        <div className="flex items-center justify-center min-h-screen">
          <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-primary"></div>
        </div>
      }
    >
      <Layout>
        {/* Hero Section */}
        <section className="relative min-h-[80vh] bg-gradient-to-br from-sky-400 via-blue-500 to-indigo-600 overflow-hidden">
          {/* ËÉåÊôØË£ùÈ£æÂÖÉÁ¥† */}
          <div className="absolute inset-0">
            <div className="absolute top-20 left-20 w-72 h-72 bg-white/10 rounded-full blur-3xl"></div>
            <div className="absolute bottom-20 right-20 w-96 h-96 bg-white/5 rounded-full blur-3xl"></div>
            <div className="absolute top-1/2 left-1/3 w-64 h-64 bg-purple-300/10 rounded-full blur-2xl"></div>

            {/* Êñ∞Â¢ûÁöÑÊµÆÂãïÂπæ‰ΩïË£ùÈ£æ */}
            <div className="absolute top-32 right-32 w-16 h-16 bg-white/20 rounded-lg rotate-45 animate-pulse"></div>
            <div className="absolute bottom-32 left-32 w-12 h-12 bg-yellow-300/30 rounded-full animate-bounce"></div>
            <div className="absolute top-48 left-1/4 w-8 h-8 bg-pink-300/40 rotate-12 animate-pulse"></div>

            {/* ÊòüÊòüË£ùÈ£æ */}
            <div className="absolute top-24 left-1/2 w-3 h-3 bg-white/60 rounded-full animate-twinkle"></div>
            <div className="absolute top-1/3 right-1/4 w-2 h-2 bg-yellow-300/80 rounded-full animate-twinkle animation-delay-1000"></div>
            <div className="absolute bottom-1/3 left-1/6 w-2 h-2 bg-white/50 rounded-full animate-twinkle animation-delay-2000"></div>

            {/* ÊµÆÂãïÁöÑÁ∑öÊ¢ùË£ùÈ£æ */}
            <div className="absolute top-1/4 right-1/5 w-32 h-0.5 bg-white/30 rotate-12 animate-pulse"></div>
            <div className="absolute bottom-1/4 left-1/8 w-24 h-0.5 bg-yellow-300/50 -rotate-12 animate-pulse animation-delay-1500"></div>
          </div>

          <div className="container mx-auto px-4 py-12 relative z-10">
            <div className="max-w-4xl mx-auto text-center">
              {/* ‰∏ªÊ®ôÈ°åÂçÄÂ°ä */}
              <div className="mb-8">
                <h1 className="text-5xl md:text-6xl font-bold mb-6 text-white leading-tight">
                  Â∞áÂ∞èË™™ËΩâÊèõÁÇ∫
                  <span className="block bg-gradient-to-r from-yellow-300 via-orange-300 to-pink-300 bg-clip-text text-transparent">
                    EPUB ÈõªÂ≠êÊõ∏
                  </span>
                </h1>
                <p className="text-xl md:text-2xl mb-6 text-white/90 max-w-3xl mx-auto leading-relaxed">
                  ÊîØÊè¥Â∞èË™¨ÂÆ∂„Å´„Å™„Çç„ÅÜÂíå„Ç´„ÇØ„É®„É†Á∂≤Á´ôÔºå‰∏ÄÈçµËΩâÊèõ‰∏ãËºâ EPUBÔºåÊîØÊè¥
                  Kindle ËΩâÂØÑ
                </p>
              </div>

              {/* URL Input Section */}
              <div className="bg-white/95 backdrop-blur-sm rounded-2xl p-8 shadow-2xl border border-white/20 max-w-2xl mx-auto">
                <div className="mb-6">
                  <h3 className="text-2xl font-bold text-gray-800 mb-2">
                    ÈñãÂßãËΩâÊèõ
                  </h3>
                  <p className="text-gray-600">Ëº∏ÂÖ•Â∞èË™™Á∂≤ÂùÄÊàñ‰ΩúÂìÅ ID</p>
                </div>

                <div className="flex flex-col gap-4">
                  <Input
                    placeholder="‰æãÂ¶ÇÔºöhttps://ncode.syosetu.com/n1234ab/ Êàñ n1234ab"
                    value={input}
                    onChange={(e) => setInput(e.target.value)}
                    className="w-full h-14 bg-white border-2 border-gray-200 focus:border-sky-400 text-lg px-6 rounded-xl transition-all duration-200 placeholder:text-gray-400"
                  />

                  <Button
                    onClick={handleDownload}
                    disabled={isLoading || !source || !sourceId}
                    className="w-full h-14 bg-gradient-to-r from-sky-500 to-blue-600 hover:from-sky-600 hover:to-blue-700 text-white font-semibold text-lg rounded-xl shadow-lg hover:shadow-xl transition-all duration-200 transform hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none"
                  >
                    {isLoading ? (
                      <div className="flex items-center gap-3">
                        <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                        ËôïÁêÜ‰∏≠...
                      </div>
                    ) : (
                      <div className="flex items-center gap-3">
                        <Eye className="w-5 h-5" />
                        Áç≤ÂèñÈ†êË¶Ω
                      </div>
                    )}
                  </Button>
                </div>

                {error && (
                  <div className="mt-4 p-4 bg-red-50 border border-red-200 rounded-xl">
                    <p className="text-red-600 font-medium">{error}</p>
                  </div>
                )}

                {source && (
                  <div className="mt-4 p-4 bg-green-50 border border-green-200 rounded-xl">
                    <p className="text-green-700 font-medium flex items-center gap-2">
                      <CheckCircle className="w-5 h-5" />
                      Â∑≤Ê™¢Ê∏¨Âà∞Á´ôÈªûÔºö
                      {source === NOVEL_SITES.NAROU
                        ? "Â∞èË™™ÂÆ∂„Å´„Å™„Çç„ÅÜ"
                        : "„Ç´„ÇØ„É®„É†"}
                    </p>
                  </div>
                )}

                {isLoading && (
                  <div className="mt-4 p-4 bg-blue-50 border border-blue-200 rounded-xl">
                    <div className="flex items-center gap-3 text-blue-700">
                      <Loader2 className="w-5 h-5 animate-spin" />
                      <span className="font-medium">
                        {previewStatus === "processing"
                          ? "Ê≠£Âú®Áà¨ÂèñÂ∞èË™™Ë≥áÊñôÔºåË´ãÁ®çÂÄô..."
                          : previewStatus === "queued"
                          ? "Ê≠£Âú®Á≠âÂæÖËôïÁêÜÔºåË´ãÁ®çÂÄô..."
                          : "Ê≠£Âú®ËôïÁêÜÊÇ®ÁöÑË´ãÊ±ÇÔºåË´ãÁ®çÂÄô..."}
                      </span>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>

          {/* Â∫ïÈÉ®Áèæ‰ª£ÂåñË£ùÈ£æ */}
          <div className="absolute bottom-0 left-0 w-full h-20 bg-gradient-to-t from-white/20 to-transparent"></div>
          <div className="absolute bottom-4 left-1/2 transform -translate-x-1/2">
            <div className="flex items-center gap-4">
              <div className="w-12 h-1 bg-white/30 rounded-full"></div>
              <div className="w-3 h-3 bg-white/40 rounded-full animate-pulse"></div>
              <div className="w-8 h-1 bg-white/30 rounded-full"></div>
              <div
                className="w-2 h-2 bg-white/50 rounded-full animate-pulse"
                style={{ animationDelay: "0.5s" }}
              ></div>
              <div className="w-16 h-1 bg-white/30 rounded-full"></div>
            </div>
          </div>
        </section>

        {/* Â∞èË™™È†êË¶ΩÂΩàÂá∫ÂÖÉ‰ª∂ - ‰ΩøÁî® Portal Á¢∫‰øùÁõ∏Â∞çÊñº viewport ÂÆö‰Ωç */}
        {showPreview && preview && (
          <Portal>
            <div className="fixed inset-0 bg-black/50 z-[60] backdrop-blur-md transition-all duration-300">
              <div
                className={`fixed top-[50%] left-[50%] translate-x-[-50%] translate-y-[-50%] bg-white/95 backdrop-blur-lg rounded-2xl shadow-2xl max-w-2xl w-[95vw] max-h-[90vh] overflow-hidden border border-white/20 ${previewColor.glowEffect} transform transition-all duration-300 animate-in slide-in-from-bottom-4 fade-in-0 zoom-in-95 z-50`}
              >
                <div className="flex flex-col h-full">
                  {/* Ê®ôÈ°åÊ¨Ñ */}
                  <div
                    className={`bg-gradient-to-r ${previewColor.gradient} text-white p-6 relative overflow-hidden`}
                  >
                    <div className="absolute inset-0 bg-white/10 backdrop-blur-sm"></div>
                    <div className="relative flex justify-between items-start">
                      <div className="flex-1 pr-4">
                        <h2 className="text-2xl font-bold leading-tight mb-2">
                          {preview.title}
                        </h2>
                        <div className="flex flex-wrap items-center gap-2">
                          <span className="px-3 py-1 bg-white/20 rounded-full text-sm font-medium">
                            {preview.author}
                          </span>
                          <span className="px-3 py-1 bg-white/20 rounded-full text-sm font-medium">
                            {preview.source === NOVEL_SITES.NAROU
                              ? "Â∞èË™™ÂÆ∂„Å´„Å™„Çç„ÅÜ"
                              : "„Ç´„ÇØ„É®„É†"}
                          </span>
                        </div>
                      </div>
                      <button
                        onClick={handleClosePreview}
                        className="text-white/80 hover:text-white transition-colors duration-200 p-2 hover:bg-white/10 rounded-full flex-shrink-0"
                      >
                        <X size={24} />
                      </button>
                    </div>
                  </div>

                  {/* ÂÖßÂÆπÂçÄÂüü */}
                  <div className="flex-1 overflow-y-auto p-6">
                    <div className="mb-6">
                      <h3
                        className={`text-lg font-bold mb-3 ${previewColor.textLight} flex items-center gap-2`}
                      >
                        <div
                          className={`w-1 h-6 ${previewColor.bg} rounded-full`}
                        ></div>
                        Á∞°‰ªã
                      </h3>
                      <div
                        className={`text-gray-700 whitespace-pre-line ${previewColor.bgLight}/50 p-4 rounded-xl border border-gray-200/60 leading-relaxed max-h-64 overflow-y-auto preview-description-scroll`}
                      >
                        {preview.description}
                      </div>
                    </div>
                  </div>

                  {/* Â∫ïÈÉ®Êìç‰ΩúÊ¨Ñ */}
                  <div className="border-t border-gray-200/60 p-6 bg-gray-50/50 backdrop-blur-sm">
                    <div className="flex items-center justify-between">
                      <div className="text-sm text-gray-500">
                        ÈªûÊìä„ÄåÁ¢∫Ë™çËΩâÊèõ„ÄçÈñãÂßãËôïÁêÜÊ≠§Â∞èË™™
                      </div>
                      <Button
                        onClick={handleConfirmConversion}
                        disabled={conversionLoading}
                        className={`px-6 py-3 text-white bg-gradient-to-r ${previewColor.gradient} font-semibold rounded-xl shadow-lg transition-all duration-200 transform hover:scale-105 hover:shadow-xl disabled:opacity-70 disabled:cursor-not-allowed disabled:transform-none`}
                      >
                        {conversionLoading ? (
                          <div className="flex items-center gap-2">
                            <div className="w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
                            ËôïÁêÜ‰∏≠...
                          </div>
                        ) : (
                          <div className="flex items-center gap-2">
                            <DownloadCloud size={18} />
                            Á¢∫Ë™çËΩâÊèõ
                          </div>
                        )}
                      </Button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </Portal>
        )}

        {/* Features Section */}
        <section className="relative py-20 px-4 bg-gradient-to-br from-slate-50 via-gray-50 to-blue-50/30 overflow-hidden">
          {/* ËÉåÊôØË£ùÈ£æ */}
          <div className="absolute inset-0 opacity-40">
            <div className="absolute top-10 right-10 w-64 h-64 bg-gradient-to-br from-sky-200 to-blue-300 rounded-full blur-3xl"></div>
            <div className="absolute bottom-20 left-10 w-48 h-48 bg-gradient-to-br from-indigo-200 to-purple-300 rounded-full blur-2xl"></div>
            <div className="absolute top-1/2 left-1/2 w-32 h-32 bg-gradient-to-br from-emerald-200 to-teal-300 rounded-full blur-xl transform -translate-x-1/2 -translate-y-1/2"></div>
          </div>

          {/* Êñ∞Â¢ûÁöÑÂπæ‰ΩïË£ùÈ£æÂÖÉÁ¥† */}
          <div className="absolute inset-0 opacity-20">
            <div className="absolute top-32 right-1/4 w-16 h-16 bg-sky-300/40 rounded-lg rotate-45 animate-pulse"></div>
            <div className="absolute bottom-32 left-1/4 w-12 h-12 bg-blue-300/50 rounded-full animate-bounce"></div>
            <div className="absolute top-1/3 right-1/3 w-8 h-8 bg-indigo-300/60 rotate-12 animate-pulse"></div>
          </div>

          <div className="container mx-auto max-w-6xl relative z-10">
            <div className="text-center mb-20">
              <div className="inline-flex items-center gap-2 px-4 py-2 bg-sky-100 text-sky-700 rounded-full text-sm font-medium mb-6">
                <span className="w-2 h-2 bg-sky-500 rounded-full"></span>
                ÁÇ∫‰ªÄÈ∫ºÈÅ∏ÊìáÊàëÂÄë
              </div>
              <h2 className="text-4xl md:text-5xl font-bold mb-6 text-gray-800 bg-gradient-to-r from-gray-700 to-gray-900 bg-clip-text text-transparent">
                Â∞àÊ•≠ÁöÑ Syosetu2EPUB ÊúçÂãô
              </h2>
              <p className="text-xl text-gray-600 max-w-3xl mx-auto leading-relaxed">
                Â∞àÊ•≠ÁöÑÂ∞èË™™ËΩâÊèõÂ∑•ÂÖ∑ÔºåËÆìÊÇ®ËºïÈ¨Ü‰∫´ÂèóÊï∏‰ΩçÈñ±ËÆÄÈ´îÈ©óÔºåÊîØÊè¥Â§öÁ®ÆÂπ≥Âè∞
              </p>
              <div className="mt-8 flex justify-center">
                <div className="h-1 w-32 bg-gradient-to-r from-sky-400 via-blue-500 to-indigo-500 rounded-full"></div>
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 mb-16">
              {features.map((feature, index) => (
                <Card
                  key={index}
                  className={`group relative overflow-hidden border-2 ${feature.border} hover:shadow-2xl transition-all duration-500 transform hover:-translate-y-3 hover:scale-105 bg-white/90 backdrop-blur-sm`}
                  style={{
                    animationDelay: `${index * 100}ms`,
                  }}
                >
                  <div
                    className={`absolute inset-0 bg-gradient-to-br ${feature.gradient} opacity-0 group-hover:opacity-10 transition-all duration-500`}
                  ></div>

                  <CardHeader className="pb-4 relative z-10">
                    <div
                      className={`w-20 h-20 rounded-3xl ${feature.bgLight} flex items-center justify-center mb-6 mx-auto group-hover:scale-110 transition-transform duration-300 shadow-lg`}
                    >
                      <span className="text-4xl">{feature.icon}</span>
                    </div>
                    <CardTitle
                      className={`text-xl font-bold text-center ${feature.color} group-hover:text-opacity-90 transition-colors duration-300`}
                    >
                      {feature.title}
                    </CardTitle>
                  </CardHeader>

                  <CardContent className="text-center relative z-10 pb-6">
                    <p className="text-gray-600 leading-relaxed group-hover:text-gray-700 transition-colors duration-300">
                      {feature.description}
                    </p>
                  </CardContent>

                  {/* Ë£ùÈ£æÊÄßÂÖÉÁ¥† */}
                  <div className="absolute top-4 right-4 w-8 h-8 border-2 border-gray-200 rounded-full opacity-20 group-hover:opacity-40 transition-opacity duration-300"></div>
                  <div className="absolute bottom-4 left-4 w-6 h-6 border-2 border-gray-200 rounded-full opacity-20 group-hover:opacity-40 transition-opacity duration-300"></div>

                  {/* Êï∏Â≠óÊ®ôÁ±§ */}
                  <div
                    className={`absolute top-6 left-6 w-8 h-8 rounded-full ${feature.bgLight} ${feature.color} flex items-center justify-center text-sm font-bold opacity-60 group-hover:opacity-80 transition-opacity duration-300`}
                  >
                    {index + 1}
                  </div>
                </Card>
              ))}
            </div>

            {/* Áµ±Ë®àÊï∏ÊìöÂçÄÂ°ä */}
            <div className="bg-white/80 backdrop-blur-sm rounded-3xl p-8 border border-gray-200 shadow-xl">
              <div className="grid grid-cols-1 md:grid-cols-3 gap-8 text-center">
                <div className="space-y-2">
                  <div className="text-4xl font-bold bg-gradient-to-r from-sky-500 to-blue-600 bg-clip-text text-transparent">
                    1000+
                  </div>
                  <div className="text-gray-600 font-medium">
                    ÊàêÂäüËΩâÊèõÁöÑÂ∞èË™™
                  </div>
                </div>
                <div className="space-y-2">
                  <div className="text-4xl font-bold bg-gradient-to-r from-green-500 to-emerald-600 bg-clip-text text-transparent">
                    500+
                  </div>
                  <div className="text-gray-600 font-medium">ÊªøÊÑèÁöÑÁî®Êà∂</div>
                </div>
                <div className="space-y-2">
                  <div className="text-4xl font-bold bg-gradient-to-r from-purple-500 to-violet-600 bg-clip-text text-transparent">
                    99.9%
                  </div>
                  <div className="text-gray-600 font-medium">Á≥ªÁµ±Á©©ÂÆöÊÄß</div>
                </div>
              </div>
            </div>

            {/* Â∫ïÈÉ®Ë£ùÈ£æÁ∑ö */}
            <div className="mt-16 flex justify-center">
              <div className="h-px w-64 bg-gradient-to-r from-transparent via-gray-300 to-transparent"></div>
            </div>
          </div>
        </section>

        {/* CTA Section */}
        {!isAuthenticated && (
          <section className="bg-gradient-to-br from-gray-50 to-white py-16 border-t border-gray-200">
            <div className="container mx-auto px-4 text-center max-w-4xl">
              <div className="bg-white/80 backdrop-blur-sm rounded-2xl shadow-xl p-8 border border-gray-200">
                <h2 className="text-3xl font-bold mb-6 text-gray-800 bg-gradient-to-r from-sky-600 to-blue-600 bg-clip-text text-transparent">
                  ÈñãÂßã‰ΩøÁî® Syosetu2EPUB
                </h2>
                <p className="text-lg text-gray-600 mb-8 max-w-2xl mx-auto leading-relaxed">
                  Ë®ªÂÜäÊúÉÂì°Âç≥ÂèØ‰∫´ÊúâÂÆåÊï¥ÁöÑËΩâÊèõÊúçÂãôÔºåÂåÖÊã¨ Kindle
                  ËΩâÂØÑ„ÄÅ‰ªªÂãôÊ≠∑Âè≤Êü•Ë©¢„ÄÅÂÑ™ÂÖàËôïÁêÜÁ≠âÂäüËÉΩ
                </p>
                <div className="flex flex-col sm:flex-row gap-4 justify-center">
                  <Button
                    asChild
                    variant="default"
                    className="bg-gradient-to-r from-sky-500 to-blue-600 hover:from-sky-600 hover:to-blue-700 text-white px-8 py-3 rounded-xl shadow-lg hover:shadow-xl transition-all duration-200 transform hover:scale-105"
                  >
                    <Link to="/how-to-use">‰ΩøÁî®ÊïôÂ≠∏</Link>
                  </Button>
                  <Button
                    onClick={handleLogin}
                    variant="outline"
                    className="border-2 border-sky-500 text-sky-600 hover:bg-gradient-to-r hover:from-sky-50 hover:to-blue-50 px-8 py-3 rounded-xl transition-all duration-200 hover:border-sky-600"
                  >
                    Ë®ªÂÜä/ÁôªÂÖ•
                  </Button>
                </div>

                <div className="mt-8 flex justify-center items-center gap-6 text-sm text-gray-500">
                  <div className="flex items-center gap-2">
                    <div className="w-3 h-3 rounded-full bg-green-500"></div>
                    <span>Á´ãÂç≥Ë®ªÂÜä</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <div className="w-3 h-3 rounded-full bg-blue-500"></div>
                    <span>Âç≥ÊôÇËΩâÊèõ</span>
                  </div>
                  <div className="flex items-center gap-2">
                    <div className="w-3 h-3 rounded-full bg-purple-500"></div>
                    <span>ÂÆâÂÖ®ÂèØÈù†</span>
                  </div>
                </div>
              </div>
            </div>
          </section>
        )}

        {/* Welcome Section for Authenticated Users */}
        {isAuthenticated && (
          <section className="relative py-16 bg-gradient-to-br from-sky-50 via-blue-50 to-indigo-50 border-t border-gray-200 overflow-hidden">
            {/* ËÉåÊôØË£ùÈ£æ */}
            <div className="absolute inset-0 opacity-20">
              <div className="absolute top-0 left-0 w-96 h-96 bg-gradient-to-br from-sky-300 to-blue-400 rounded-full blur-3xl transform -translate-x-1/2 -translate-y-1/2"></div>
              <div className="absolute bottom-0 right-0 w-80 h-80 bg-gradient-to-br from-indigo-300 to-purple-400 rounded-full blur-3xl transform translate-x-1/2 translate-y-1/2"></div>
            </div>

            <div className="container mx-auto px-4 relative z-10">
              <div className="max-w-4xl mx-auto text-center">
                <div className="inline-flex items-center gap-2 px-4 py-2 bg-sky-100 text-sky-700 rounded-full text-sm font-medium mb-6">
                  <span className="w-2 h-2 bg-sky-500 rounded-full animate-pulse"></span>
                  Â∑≤ÁôªÂÖ•ÊúÉÂì°
                </div>

                <h2 className="text-3xl md:text-4xl font-bold mb-6 text-gray-800">
                  Ê≠°ËøéÂõû‰æÜÔºå
                  <span className="bg-gradient-to-r from-sky-600 to-blue-600 bg-clip-text text-transparent">
                    {user?.displayName || "ÊúÉÂì°"}
                  </span>
                  ÔºÅ
                </h2>

                <p className="text-xl text-gray-600 mb-10 max-w-3xl mx-auto leading-relaxed">
                  ÊÇ®Â∑≤Á∂ìÊòØÊàëÂÄëÁöÑÊúÉÂì°ÔºåÂèØ‰ª•‰∫´ÂèóÂÆåÊï¥ÁöÑËΩâÊèõÊúçÂãô„ÄÇÊü•ÁúãÊÇ®ÁöÑËΩâÊèõË®òÈåÑÊàñÁÆ°ÁêÜÊÇ®ÁöÑÂ∏≥Êà∂Ë®≠ÂÆö„ÄÇ
                </p>

                <div className="flex flex-col sm:flex-row gap-6 justify-center">
                  <Button
                    onClick={() => setIsRecentTasksModalOpen(true)}
                    variant="default"
                    className="bg-gradient-to-r from-sky-500 to-blue-600 hover:from-sky-600 hover:to-blue-700 text-white px-8 py-4 rounded-xl shadow-lg hover:shadow-xl transition-all duration-200 transform hover:scale-105"
                    aria-label="Êü•ÁúãÊúÄËøëÁöÑËΩâÊèõ‰ªªÂãô"
                  >
                    <History className="mr-3 h-5 w-5" />
                    <span className="text-lg font-semibold">ÊúÄËøëÁöÑ‰ªªÂãô</span>
                  </Button>
                  <Button
                    asChild
                    variant="outline"
                    className="border-2 border-sky-500 text-sky-600 hover:bg-gradient-to-r hover:from-sky-50 hover:to-blue-50 px-8 py-4 rounded-xl transition-all duration-200 hover:border-sky-600 hover:shadow-lg"
                  >
                    <Link to="/me">
                      <span className="text-lg font-semibold">ÊúÉÂì°‰∏≠ÂøÉ</span>
                    </Link>
                  </Button>
                </div>

                {/* ÂäüËÉΩÂø´Êç∑ÂÖ•Âè£ */}
                <div className="mt-12 grid grid-cols-1 sm:grid-cols-3 gap-6 max-w-3xl mx-auto">
                  <div className="bg-white/80 backdrop-blur-sm rounded-2xl p-6 border border-gray-200 shadow-lg hover:shadow-xl transition-all duration-200 transform hover:-translate-y-1">
                    <div className="w-12 h-12 bg-gradient-to-r from-green-500 to-emerald-600 rounded-xl flex items-center justify-center mb-4 mx-auto">
                      <Send className="w-6 h-6 text-white" />
                    </div>
                    <h3 className="font-bold text-gray-800 mb-2">
                      Kindle ËΩâÂØÑ
                    </h3>
                    <p className="text-sm text-gray-600">
                      Áõ¥Êé•ÁôºÈÄÅÂà∞ÊÇ®ÁöÑ Kindle Ë®≠ÂÇô
                    </p>
                  </div>

                  <div className="bg-white/80 backdrop-blur-sm rounded-2xl p-6 border border-gray-200 shadow-lg hover:shadow-xl transition-all duration-200 transform hover:-translate-y-1">
                    <div className="w-12 h-12 bg-gradient-to-r from-blue-500 to-indigo-600 rounded-xl flex items-center justify-center mb-4 mx-auto">
                      <Download className="w-6 h-6 text-white" />
                    </div>
                    <h3 className="font-bold text-gray-800 mb-2">Âø´ÈÄü‰∏ãËºâ</h3>
                    <p className="text-sm text-gray-600">
                      ‰∏ÄÈçµ‰∏ãËºâ EPUB Ê†ºÂºèÈõªÂ≠êÊõ∏
                    </p>
                  </div>

                  <div className="bg-white/80 backdrop-blur-sm rounded-2xl p-6 border border-gray-200 shadow-lg hover:shadow-xl transition-all duration-200 transform hover:-translate-y-1">
                    <div className="w-12 h-12 bg-gradient-to-r from-purple-500 to-violet-600 rounded-xl flex items-center justify-center mb-4 mx-auto">
                      <Clock className="w-6 h-6 text-white" />
                    </div>
                    <h3 className="font-bold text-gray-800 mb-2">‰ªªÂãôËøΩËπ§</h3>
                    <p className="text-sm text-gray-600">Âç≥ÊôÇÁõ£ÊéßËΩâÊèõÈÄ≤Â∫¶</p>
                  </div>
                </div>
              </div>
            </div>
          </section>
        )}

        {/* Footer */}
        <footer className="bg-white py-8 border-t border-gray-200">
          <div className="container mx-auto px-4">
            <div className="flex flex-col md:flex-row justify-between items-center gap-4">
              <div className="text-gray-600 text-sm">
                ¬© 2024 Syosetu2EPUB. All rights reserved.
              </div>
              <nav className="flex gap-6">
                <Link
                  to="/how-to-use"
                  className="text-gray-600 hover:text-sky-500 text-sm"
                >
                  ‰ΩøÁî®ÊïôÂ≠∏
                </Link>
                <Link
                  to="/me"
                  className="text-gray-600 hover:text-sky-500 text-sm"
                >
                  ÊúÉÂì°‰∏≠ÂøÉ
                </Link>
                <a
                  href="mailto:support@syosetu2epub.online"
                  className="text-gray-600 hover:text-sky-500 text-sm"
                >
                  ËÅØÁµ°ÊàëÂÄë
                </a>
              </nav>
            </div>
          </div>
        </footer>

        {/* ‰ªªÂãôÁãÄÊÖãÊ¨Ñ - ‰ΩøÁî® Portal Á¢∫‰øùÁõ∏Â∞çÊñº viewport ÂÆö‰Ωç */}
        {activeJobs.size > 0 && (
          <Portal>
            <div
              className={`fixed bottom-6 right-6 w-80 bg-white/95 backdrop-blur-lg rounded-2xl shadow-2xl border border-gray-200/60 z-50 transition-all duration-300 overflow-hidden ${
                statusBarCollapsed ? "h-16" : "max-h-96"
              }`}
            >
              <div
                className="bg-gradient-to-r from-sky-500 to-blue-600 text-white p-4 flex justify-between items-center cursor-pointer rounded-t-2xl"
                onClick={toggleStatusBar}
              >
                <div className="flex items-center gap-3">
                  <div className="w-8 h-8 bg-white/20 rounded-full flex items-center justify-center">
                    <Clock className="w-4 h-4" />
                  </div>
                  <div>
                    <h3 className="text-sm font-semibold">ËΩâÊ™î‰ªªÂãô</h3>
                    <p className="text-xs text-white/80">
                      {activeJobs.size} ÂÄãÈÄ≤Ë°å‰∏≠
                    </p>
                  </div>
                </div>
                <div className="flex items-center gap-3">
                  <span className="text-xs text-white/70">
                    {formatTimeRemaining(
                      Math.floor(
                        (new Date().getTime() - lastSyncTime.getTime()) / 1000
                      )
                    )}{" "}
                    ÂâçÊõ¥Êñ∞
                  </span>
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      toggleStatusBar();
                    }}
                    className="text-white hover:text-white/80 transition-colors duration-200 p-1 rounded-full hover:bg-white/10"
                  >
                    {statusBarCollapsed ? (
                      <ChevronUp size={18} />
                    ) : (
                      <ChevronDown size={18} />
                    )}
                  </button>
                </div>
              </div>
              <div
                className={`overflow-y-auto ${
                  statusBarCollapsed ? "hidden" : "max-h-80"
                }`}
              >
                {Array.from(activeJobs.entries()).map(([jobId, job]) => (
                  <div
                    key={jobId}
                    className="p-4 border-b border-gray-100/60 hover:bg-gradient-to-r hover:from-sky-50/50 hover:to-blue-50/50 transition-all duration-200"
                  >
                    <div className="flex justify-between items-start mb-3">
                      <div className="flex items-center gap-3 flex-1 min-w-0">
                        <div className="w-10 h-10 bg-gradient-to-r from-sky-100 to-blue-100 rounded-xl flex items-center justify-center flex-shrink-0">
                          {getStatusIcon(job.status)}
                        </div>
                        <div className="flex-1 min-w-0">
                          <div
                            className="font-medium text-sm text-gray-800 truncate"
                            title={job.title}
                          >
                            {job.title}
                          </div>
                          <div className="text-xs text-gray-500 mt-1">
                            ÈñãÂßãÔºö
                            {job.startTime.toLocaleTimeString("zh-TW", {
                              hour: "2-digit",
                              minute: "2-digit",
                            })}
                          </div>
                        </div>
                      </div>
                      <button
                        onClick={() => removeJob(jobId)}
                        className="text-gray-400 hover:text-red-500 flex-shrink-0 ml-3 p-1 rounded-full hover:bg-red-50 transition-all duration-200"
                      >
                        <X size={16} />
                      </button>
                    </div>

                    <div className="space-y-2">
                      <div className="flex justify-between items-center">
                        <span
                          className={`text-xs font-medium px-2 py-1 rounded-full ${
                            job.status === "queued" ||
                            job.status === "processing"
                              ? "bg-sky-100 text-sky-700"
                              : job.status === "completed"
                              ? "bg-green-100 text-green-700"
                              : job.status === "retrying"
                              ? "bg-orange-100 text-orange-700"
                              : job.status === "cancelled"
                              ? "bg-gray-100 text-gray-700"
                              : "bg-red-100 text-red-700"
                          }`}
                        >
                          {getStatusText(job)}
                        </span>
                        {job.estimatedTimeRemaining &&
                          job.status === "processing" && (
                            <span className="text-xs text-gray-500 bg-gray-100 px-2 py-1 rounded-full">
                              {formatTimeRemaining(job.estimatedTimeRemaining)}
                            </span>
                          )}
                      </div>

                      {/* ÈÄ≤Â∫¶Ê¢ù */}
                      <ProgressBar progress={job.progress} />

                      {/* ÈåØË™§‰ø°ÊÅØ */}
                      {job.errorMessage &&
                        (job.status === "failed" ||
                          job.status === "retrying") && (
                          <div className="text-xs text-red-600 bg-red-50 p-2 rounded-lg border border-red-200">
                            <div className="flex items-center gap-1">
                              <AlertCircle className="w-3 h-3 flex-shrink-0" />
                              <span className="break-words">
                                {job.errorMessage}
                              </span>
                            </div>
                          </div>
                        )}

                      {/* Êìç‰ΩúÊåâÈàï */}
                      {job.status === "completed" && job.publicUrl && (
                        <div className="flex items-center gap-2 mt-3 pt-2 border-t border-gray-100">
                          <button
                            onClick={() => {
                              if (job.publicUrl) {
                                const link = document.createElement("a");
                                link.href = job.publicUrl;
                                link.download = `${job.title || "novel"}.epub`;
                                link.rel = "noopener noreferrer";
                                document.body.appendChild(link);
                                link.click();
                                document.body.removeChild(link);
                              }
                            }}
                            className="flex-1 inline-flex items-center justify-center gap-2 text-xs bg-gradient-to-r from-blue-600 to-sky-600 hover:from-blue-700 hover:to-sky-700 text-white px-3 py-2 rounded-lg transition-all duration-200 hover:scale-105 hover:shadow-lg font-medium"
                          >
                            <Download size={14} /> ‰∏ãËºâÊ™îÊ°à
                          </button>
                          {/* Âè™Â∞çÂ∑≤ÁôªÂÖ•‰∏îÊúâ kindleEmail ÁöÑÁî®Êà∂È°ØÁ§∫ Send to Kindle ÊåâÈàï */}
                          {isAuthenticated && user?.kindleEmail && (
                            <SendToKindleButton epubJobId={jobId} />
                          )}
                        </div>
                      )}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </Portal>
        )}

        {/* ÊúÄËøë‰ªªÂãôÂΩàÁ™ó */}
        <RecentTasksModal
          isOpen={isRecentTasksModalOpen}
          onOpenChange={setIsRecentTasksModalOpen}
          onSendToKindle={handleSendToKindleFromModal}
        />
      </Layout>
    </Suspense>
  );
}
